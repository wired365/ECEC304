FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 D9 LJMP  _VR_ADC_ADConversion_ISR(0149)     ljmp	_VR_ADC_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [ucVR_ADCResult+238],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [ucVR_ADCResult+239],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 37 LCALL 0x0337             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 30    MOV   X,0x30             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 09    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 09    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 09    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 08    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 09    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 09 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 08    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 08    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 09    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 09 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 08    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 04 E8 LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.3.2710
0232: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_pdproject1_Bank1
                                        (0006) export LoadConfigTBL_pdproject1_Bank0
                                        (0007) export LoadConfigTBL_pdproject1_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_pdproject1_Bank0:
                                        (0010) ;  Instance name VR_ADC, User Module ADCINC
                                        (0011) ;       Instance name VR_ADC, Block Name ADC(ASC10)
                                        (0012) 	db		80h, 90h		;VR_ADC_AtoDcr0(ASC10CR0)
                                        (0013) 	db		81h, 00h		;VR_ADC_AtoDcr1(ASC10CR1)
                                        (0014) 	db		82h, 60h		;VR_ADC_AtoDcr2(ASC10CR2)
                                        (0015) 	db		83h, f0h		;VR_ADC_AtoDcr3(ASC10CR3)
                                        (0016) ;       Instance name VR_ADC, Block Name PWM(DBB00)
                                        (0017) 	db		23h, 00h		;VR_ADC_PWMcr0(DBB00CR0)
                                        (0018) 	db		21h, 00h		;VR_ADC_PWMdr1(DBB00DR1)
                                        (0019) 	db		22h, 01h		;VR_ADC_PWMdr2(DBB00DR2)
                                        (0020) ;  Instance name VR_PGA, User Module PGA
                                        (0021) ;       Instance name VR_PGA, Block Name GAIN(ACB00)
                                        (0022) 	db		71h, fdh		;VR_PGA_GAIN_CR0(ACB00CR0)
                                        (0023) 	db		72h, 21h		;VR_PGA_GAIN_CR1(ACB00CR1)
                                        (0024) 	db		73h, 20h		;VR_PGA_GAIN_CR2(ACB00CR2)
                                        (0025) 	db		70h, 00h		;VR_PGA_GAIN_CR3(ACB00CR3)
                                        (0026) ;  Global Register values Bank 0
                                        (0027) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0028) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0029) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0030) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0031) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0032) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0033) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0034) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0035) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0036) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0037) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0038) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0039) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0040) 	db		b6h, 01h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0041) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0042) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0043) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0044) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0045) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0046) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0047) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0048) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0049) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0050) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0051) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0052) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0053) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0054) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0055) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0056) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0057) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0058) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0059) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0060) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0061) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0062) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0063) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0064) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0065) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0066) 	db		ffh
                                        (0067) LoadConfigTBL_pdproject1_Bank1:
                                        (0068) ;  Instance name VR_ADC, User Module ADCINC
                                        (0069) ;       Instance name VR_ADC, Block Name ADC(ASC10)
                                        (0070) ;       Instance name VR_ADC, Block Name PWM(DBB00)
                                        (0071) 	db		20h, 31h		;VR_ADC_PWMfn(DBB00FN)
                                        (0072) 	db		21h, 15h		;VR_ADC_PWMsl(DBB00IN)
                                        (0073) 	db		22h, 40h		;VR_ADC_PWMos(DBB00OU)
                                        (0074) ;  Instance name VR_PGA, User Module PGA
                                        (0075) ;       Instance name VR_PGA, Block Name GAIN(ACB00)
                                        (0076) ;  Global Register values Bank 1
                                        (0077) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0078) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0079) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0080) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0081) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0082) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0083) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0084) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0085) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0086) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0087) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0088) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0089) 	db		e1h, 2fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0090) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0091) 	db		dfh, f9h		; OscillatorControl_3 register (OSC_CR3)
                                        (0092) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0093) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0094) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0095) 	db		ffh
                                        (0096) AREA psoc_config(rom, rel)
                                        (0097) LoadConfigTBL_pdproject1_Ordered:
                                        (0098) ;  Ordered Global Register values
                                        (0099) 	M8C_SetBank0
0234: 62 00 00 MOV   REG[0x0],0x0       (0100) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0237: 71 10    OR    F,0x10             
                                        (0101) 	M8C_SetBank1
0239: 62 00 1F MOV   REG[0x0],0x1F      (0102) 	mov	reg[00h], 1fh		; Port_0_DriveMode_0 register (PRT0DM0)
023C: 62 01 E0 MOV   REG[0x1],0xE0      (0103) 	mov	reg[01h], e0h		; Port_0_DriveMode_1 register (PRT0DM1)
023F: 70 EF    AND   F,0xEF             
                                        (0104) 	M8C_SetBank0
0241: 62 03 E0 MOV   REG[0x3],0xE0      (0105) 	mov	reg[03h], e0h		; Port_0_DriveMode_2 register (PRT0DM2)
0244: 62 02 04 MOV   REG[0x2],0x4       (0106) 	mov	reg[02h], 04h		; Port_0_GlobalSelect register (PRT0GS)
0247: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
0249: 62 02 00 MOV   REG[0x2],0x0       (0108) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
024C: 62 03 00 MOV   REG[0x3],0x0       (0109) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
024F: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
0251: 62 01 00 MOV   REG[0x1],0x0       (0111) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0254: 62 04 00 MOV   REG[0x4],0x0       (0112) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0257: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
0259: 62 04 00 MOV   REG[0x4],0x0       (0114) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
025C: 62 05 FF MOV   REG[0x5],0xFF      (0115) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
025F: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
0261: 62 07 FF MOV   REG[0x7],0xFF      (0117) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0264: 62 06 00 MOV   REG[0x6],0x0       (0118) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0267: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
0269: 62 06 00 MOV   REG[0x6],0x0       (0120) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
026C: 62 07 00 MOV   REG[0x7],0x0       (0121) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
026F: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0271: 62 05 00 MOV   REG[0x5],0x0       (0123) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0274: 62 08 00 MOV   REG[0x8],0x0       (0124) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0277: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
0279: 62 08 00 MOV   REG[0x8],0x0       (0126) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
027C: 62 09 FF MOV   REG[0x9],0xFF      (0127) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
027F: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0281: 62 0B FF MOV   REG[0xB],0xFF      (0129) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0284: 62 0A 00 MOV   REG[0xA],0x0       (0130) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0287: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
0289: 62 0A 00 MOV   REG[0xA],0x0       (0132) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
028C: 62 0B 00 MOV   REG[0xB],0x0       (0133) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
028F: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0291: 62 09 00 MOV   REG[0x9],0x0       (0135) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0294: 62 0C 00 MOV   REG[0xC],0x0       (0136) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0297: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
0299: 62 0C 00 MOV   REG[0xC],0x0       (0138) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
029C: 62 0D 00 MOV   REG[0xD],0x0       (0139) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
029F: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
02A1: 62 0F 00 MOV   REG[0xF],0x0       (0141) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02A4: 62 0E 00 MOV   REG[0xE],0x0       (0142) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A7: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
02A9: 62 0E 00 MOV   REG[0xE],0x0       (0144) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02AC: 62 0F 00 MOV   REG[0xF],0x0       (0145) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02AF: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
02B1: 62 0D 00 MOV   REG[0xD],0x0       (0147) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02B4: 62 10 00 MOV   REG[0x10],0x0      (0148) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B7: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
02B9: 62 10 00 MOV   REG[0x10],0x0      (0150) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02BC: 62 11 00 MOV   REG[0x11],0x0      (0151) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02BF: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
02C1: 62 13 00 MOV   REG[0x13],0x0      (0153) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02C4: 62 12 00 MOV   REG[0x12],0x0      (0154) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C7: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
02C9: 62 12 00 MOV   REG[0x12],0x0      (0156) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02CC: 62 13 00 MOV   REG[0x13],0x0      (0157) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02CF: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
02D1: 62 11 00 MOV   REG[0x11],0x0      (0159) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02D4: 62 14 00 MOV   REG[0x14],0x0      (0160) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D7: 71 10    OR    F,0x10             
                                        (0161) 	M8C_SetBank1
02D9: 62 14 00 MOV   REG[0x14],0x0      (0162) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02DC: 62 15 00 MOV   REG[0x15],0x0      (0163) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02DF: 70 EF    AND   F,0xEF             
                                        (0164) 	M8C_SetBank0
02E1: 62 17 00 MOV   REG[0x17],0x0      (0165) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02E4: 62 16 00 MOV   REG[0x16],0x0      (0166) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E7: 71 10    OR    F,0x10             
                                        (0167) 	M8C_SetBank1
02E9: 62 16 00 MOV   REG[0x16],0x0      (0168) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02EC: 62 17 00 MOV   REG[0x17],0x0      (0169) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02EF: 70 EF    AND   F,0xEF             
                                        (0170) 	M8C_SetBank0
02F1: 62 15 00 MOV   REG[0x15],0x0      (0171) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02F4: 62 18 00 MOV   REG[0x18],0x0      (0172) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02F7: 71 10    OR    F,0x10             
                                        (0173) 	M8C_SetBank1
02F9: 62 18 00 MOV   REG[0x18],0x0      (0174) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02FC: 62 19 00 MOV   REG[0x19],0x0      (0175) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02FF: 70 EF    AND   F,0xEF             
                                        (0176) 	M8C_SetBank0
0301: 62 1B 00 MOV   REG[0x1B],0x0      (0177) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0304: 62 1A 00 MOV   REG[0x1A],0x0      (0178) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0307: 71 10    OR    F,0x10             
                                        (0179) 	M8C_SetBank1
0309: 62 1A 00 MOV   REG[0x1A],0x0      (0180) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
030C: 62 1B 00 MOV   REG[0x1B],0x0      (0181) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
030F: 70 EF    AND   F,0xEF             
                                        (0182) 	M8C_SetBank0
0311: 62 19 00 MOV   REG[0x19],0x0      (0183) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0314: 62 1C 00 MOV   REG[0x1C],0x0      (0184) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0317: 71 10    OR    F,0x10             
                                        (0185) 	M8C_SetBank1
0319: 62 1C 00 MOV   REG[0x1C],0x0      (0186) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
031C: 62 1D 00 MOV   REG[0x1D],0x0      (0187) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
031F: 70 EF    AND   F,0xEF             
                                        (0188) 	M8C_SetBank0
0321: 62 1F 00 MOV   REG[0x1F],0x0      (0189) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0324: 62 1E 00 MOV   REG[0x1E],0x0      (0190) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0327: 71 10    OR    F,0x10             
                                        (0191) 	M8C_SetBank1
0329: 62 1E 00 MOV   REG[0x1E],0x0      (0192) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
032C: 62 1F 00 MOV   REG[0x1F],0x0      (0193) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
032F: 70 EF    AND   F,0xEF             
                                        (0194) 	M8C_SetBank0
0331: 62 1D 00 MOV   REG[0x1D],0x0      (0195) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0334: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
0336: 7F       RET                      (0197) 	ret
                                        (0198) 
                                        (0199) 
                                        (0200) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_pdproject1
                                        (0026) export _LoadConfig_pdproject1
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0337: 7C 03 3E LCALL 0x033E             (0058) 	lcall	LoadConfig_pdproject1
033A: 7C 02 32 LCALL 0x0232             (0059) 	lcall	LoadConfigTBL_pdproject1_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
033D: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration pdproject1
                                        (0067) ;
                                        (0068) ;    Load configuration registers for pdproject1.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_pdproject1:
                                        (0085)  LoadConfig_pdproject1:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
033E: 10       PUSH  X                  (0088) 	push	x
033F: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0341: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0343: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0344: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_pdproject1_Bank0
0346: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_pdproject1_Bank0
0348: 7C 03 59 LCALL 0x0359             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
034B: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
034D: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
034E: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_pdproject1_Bank1
0350: 57 05    MOV   X,0x5              (0101)     mov     X, <LoadConfigTBL_pdproject1_Bank1
0352: 7C 03 59 LCALL 0x0359             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0355: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0357: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0358: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0359: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
035B: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
035C: 08       PUSH  A                  (0132)     push    A
035D: 4F       MOV   X,SP               (0133)     mov     X, SP
035E: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0361: D0 04    JNC   0x0366             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0363: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0366: 18       POP   A                  (0138)     pop     A
0367: 20       POP   X                  (0139)     pop     X
0368: 70 EF    AND   F,0xEF             
036A: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
036D: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
036E: 08       PUSH  A                  (0145)     push    A
036F: 28       ROMX                     (0146)     romx                            ; Load register address from table
0370: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0372: A0 1F    JZ    0x0392             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0374: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0375: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0378: A0 03    JZ    0x037C             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
037A: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
037C: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
037E: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
037F: 20       POP   X                  (0156)     pop     X
0380: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0381: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0383: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0384: 08       PUSH  A                  (0160)     push    A
0385: 28       ROMX                     (0161)     romx                            ; load config data from the table
0386: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0387: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0389: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
038B: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
038C: 20       POP   X                  (0166)     pop     X
038D: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
038E: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0390: 8F D7    JMP   0x0368             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0392: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0394: 70 3F    AND   F,0x3F             
0396: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0398: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\vr_pga.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   VR_PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/9/21 at 11:59:15
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "VR_PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  VR_PGA_Start
                                        (0060) export _VR_PGA_Start
                                        (0061) export  VR_PGA_SetPower
                                        (0062) export _VR_PGA_SetPower
                                        (0063) 
                                        (0064) export  VR_PGA_SetGain
                                        (0065) export _VR_PGA_SetGain
                                        (0066) 
                                        (0067) export  VR_PGA_Stop
                                        (0068) export _VR_PGA_Stop
                                        (0069) 
                                        (0070) IF (VR_PGA_AGNDBUFAPI)
                                        (0071) export  VR_PGA_EnableAGNDBuffer
                                        (0072) export _VR_PGA_EnableAGNDBuffer
                                        (0073) export  VR_PGA_DisableAGNDBuffer
                                        (0074) export _VR_PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: VR_PGA_Start
                                        (0092) ;  FUNCTION NAME: VR_PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  VR_PGA_Start:
                                        (0111) _VR_PGA_Start:
                                        (0112)  VR_PGA_SetPower:
                                        (0113) _VR_PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0399: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
039B: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
039C: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
039D: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[VR_PGA_GAIN_CR2]                            ; read power value
039F: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
03A1: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
03A3: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[VR_PGA_GAIN_CR2], A                       ; move complete value back to register
03A5: 18       POP   A                  (0124)    pop  A
03A6: 70 3F    AND   F,0x3F             
03A8: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
03AA: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: VR_PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  VR_PGA_SetGain:
                                        (0154) _VR_PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
03AB: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
03AD: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
03AE: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
03AF: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[VR_PGA_GAIN_CR0]                            ; read mux settings
03B1: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
03B3: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
03B6: B0 0E    JNZ   0x03C5             (0164)    jnz  .SETHIGHGAIN
03B8: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[VR_PGA_GAIN_CR3],~EXGAIN                       ; Clear High Gain bit.
03BB: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
03BD: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[VR_PGA_GAIN_CR0], A                            ; move complete value back to register
03BF: 18       POP   A                  (0168)    pop  A
03C0: 70 3F    AND   F,0x3F             
03C2: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
03C4: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
03C5: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
03C8: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
03CA: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[VR_PGA_GAIN_CR0], A                            ; move complete value back to register
03CC: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[VR_PGA_GAIN_CR3], EXGAIN                       ; Set High Gain bit.
03CF: 18       POP   A                  (0177)    pop  A
03D0: 70 3F    AND   F,0x3F             
03D2: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
03D4: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: VR_PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  VR_PGA_Stop:
                                        (0203) _VR_PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
03D5: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[VR_PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
03D8: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (VR_PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: VR_PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  VR_PGA_EnableAGNDBuffer:
                                        (0233) _VR_PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[VR_PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: VR_PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  VR_PGA_DisableAGNDBuffer:
                                        (0261) _VR_PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[VR_PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File VR_PGA.asm
FILE: lib\vr_adcint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: VR_ADCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2012/9/21 at 11:56:47
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "VR_ADC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _VR_ADC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _VR_ADC_iResult
                                        (0026) export  VR_ADC_iResult
                                        (0027) export _VR_ADC_fStatus
                                        (0028) export  VR_ADC_fStatus
                                        (0029) export _VR_ADC_bState
                                        (0030) export  VR_ADC_bState
                                        (0031) export _VR_ADC_fMode
                                        (0032) export  VR_ADC_fMode
                                        (0033) export _VR_ADC_bNumSamples
                                        (0034) export  VR_ADC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  VR_ADC_iResult:
                                        (0041) _VR_ADC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  VR_ADC_fStatus:
                                        (0044) _VR_ADC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  VR_ADC_bState:
                                        (0046) _VR_ADC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  VR_ADC_fMode:
                                        (0048) _VR_ADC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  VR_ADC_bNumSamples:
                                        (0050) _VR_ADC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _VR_ADC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _VR_ADC_ADConversion_ISR:
03D9: 7A 05    DEC   [0x5]              (0093)     dec  [VR_ADC_bState]
                                        (0094) if1:
03DB: C0 02    JC    0x03DE             (0095)     jc endif1 ; no underflow
03DD: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
03DE: 3C 06 00 CMP   [0x6],0x0          (0098)     cmp [VR_ADC_fMode],0
                                        (0099) if2: 
03E1: B0 12    JNZ   0x03F4             (0100)     jnz endif2  ;leaving reset mode
03E3: 08       PUSH  A                  (0101)     push A                            ;read decimator
03E4: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
03E6: 53 03    MOV   [0x3],A            (0103)     mov  [iTemp + LowByte],A
03E8: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
03EA: 53 02    MOV   [0x2],A            (0105)     mov  [iTemp + HighByte], A
03EC: 18       POP   A                  (0106)     pop A
03ED: 55 06 01 MOV   [0x6],0x1          (0107)     mov [VR_ADC_fMode],1
03F0: 55 05 03 MOV   [0x5],0x3          (0108)     mov [VR_ADC_bState],((1<<(VR_ADC_bNUMBITS- 6))-1)
03F3: 7E       RETI                     (0109)     reti
03F4: 43 82 20 OR    REG[0x82],0x20     
03F7: 43 83 10 OR    REG[0x83],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     VR_ADC_RESET_INTEGRATOR_M
03FA: 08       PUSH  A                  (0113)     push A
03FB: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
03FD: 12 03    SUB   A,[0x3]            (0115)     sub  A,[iTemp + LowByte]
03FF: 53 03    MOV   [0x3],A            (0116)     mov  [iTemp +LowByte],A
0401: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0403: 1A 02    SBB   A,[0x2]            (0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     VR_ADC_8_OR_MORE_BITS
0405: 39 01    CMP   A,0x1              (0122)     cmp A,(1<<(VR_ADC_bNUMBITS - 8))
                                        (0123) if3: 
0407: B0 05    JNZ   0x040D             (0124)     jnz endif3 ;overflow
0409: 78       DEC   A                  (0125)     dec A
040A: 55 03 FF MOV   [0x3],0xFF         (0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(VR_ADC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF VR_ADC_SIGNED_DATA
                                        (0136) IF VR_ADC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(VR_ADC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(VR_ADC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
040D: 5F 01 03 MOV   [0x1],[0x3]        (0143)     mov  [VR_ADC_iResult + LowByte],[iTemp +LowByte]
0410: 53 00    MOV   [0x0],A            (0144)     mov  [VR_ADC_iResult + HighByte],A
0412: 55 04 01 MOV   [0x4],0x1          (0145)     mov  [VR_ADC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
0415: 18       POP   A                  (0162)     pop A
0416: 3C 07 00 CMP   [0x7],0x0          (0163)     cmp [VR_ADC_bNumSamples],0
                                        (0164) if5: 
0419: B0 0E    JNZ   0x0428             (0165)     jnz endif5 ; Number of samples is zero
041B: 55 06 00 MOV   [0x6],0x0          (0166)     mov [VR_ADC_fMode],0
041E: 55 05 00 MOV   [0x5],0x0          (0167)     mov [VR_ADC_bState],0
0421: 41 83 EF AND   REG[0x83],0xEF     
0424: 41 82 DF AND   REG[0x82],0xDF     
                                        (0168)     VR_ADC_ENABLE_INTEGRATOR_M
0427: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
0428: 7A 07    DEC   [0x7]              (0171)     dec [VR_ADC_bNumSamples]
                                        (0172) if6:
042A: A0 0E    JZ    0x0439             (0173)     jz endif6  ; count not zero
042C: 55 06 00 MOV   [0x6],0x0          (0174)     mov [VR_ADC_fMode],0
042F: 55 05 00 MOV   [0x5],0x0          (0175)     mov [VR_ADC_bState],0
0432: 41 83 EF AND   REG[0x83],0xEF     
0435: 41 82 DF AND   REG[0x82],0xDF     
                                        (0176)     VR_ADC_ENABLE_INTEGRATOR_M
0438: 7E       RETI                     (0177)     reti       
0439: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
043B: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
043E: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0441: 70 EF    AND   F,0xEF             
0443: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     VR_ADC_STOPADC_M
0446: 7E       RETI                     (0185)  reti 
FILE: lib\vr_adc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: VR_ADC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2012/9/21 at 11:56:47
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "VR_ADC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  VR_ADC_Start
                                        (0031) export _VR_ADC_Start
                                        (0032) export  VR_ADC_SetPower
                                        (0033) export _VR_ADC_SetPower
                                        (0034) export  VR_ADC_Stop
                                        (0035) export _VR_ADC_Stop
                                        (0036) export  VR_ADC_GetSamples
                                        (0037) export _VR_ADC_GetSamples
                                        (0038) export  VR_ADC_StopADC
                                        (0039) export _VR_ADC_StopADC
                                        (0040) export  VR_ADC_fIsDataAvailable
                                        (0041) export _VR_ADC_fIsDataAvailable
                                        (0042) export  VR_ADC_iClearFlagGetData
                                        (0043) export _VR_ADC_iClearFlagGetData
                                        (0044) export  VR_ADC_wClearFlagGetData
                                        (0045) export _VR_ADC_wClearFlagGetData
                                        (0046) export  VR_ADC_cClearFlagGetData
                                        (0047) export _VR_ADC_cClearFlagGetData
                                        (0048) export  VR_ADC_bClearFlagGetData
                                        (0049) export _VR_ADC_bClearFlagGetData
                                        (0050) export  VR_ADC_iGetData
                                        (0051) export _VR_ADC_iGetData
                                        (0052) export  VR_ADC_wGetData
                                        (0053) export _VR_ADC_wGetData
                                        (0054) export  VR_ADC_bGetData
                                        (0055) export _VR_ADC_bGetData
                                        (0056) export  VR_ADC_cGetData
                                        (0057) export _VR_ADC_cGetData
                                        (0058) export  VR_ADC_fClearFlag
                                        (0059) export _VR_ADC_fClearFlag
                                        (0060) export  VR_ADC_WritePulseWidth
                                        (0061) export _VR_ADC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: VR_ADC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  VR_ADC_Start:
                                        (0095) _VR_ADC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
0447: 90 0D    CALL  _VR_ADC_SetPower   (0097)    call  VR_ADC_SetPower
0449: 43 82 20 OR    REG[0x82],0x20     
044C: 43 83 10 OR    REG[0x83],0x10     
                                        (0098)    VR_ADC_RESET_INTEGRATOR_M
044F: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[VR_ADC_PWMdr1],ffh
0452: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[VR_ADC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0455: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: VR_ADC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  VR_ADC_SetPower:
                                        (0123) _VR_ADC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0456: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0457: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
0459: 08       PUSH  A                  (0127)    push A
045A: 5D 83    MOV   A,REG[0x83]        (0128)    mov  A,reg[VR_ADC_AtoDcr3]                    ; First SC block:
045C: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
045E: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0460: 60 83    MOV   REG[0x83],A        (0131)    mov  reg[VR_ADC_AtoDcr3],A                    ;   change the actual setting
0462: 18       POP   A                  (0132)    pop  A
0463: 70 3F    AND   F,0x3F             
0465: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
0467: 7F       RET                      (0134)    ret
0468: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: VR_ADC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  VR_ADC_Stop:
                                        (0155) _VR_ADC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    VR_ADC_STOPADC_M
046B: 41 83 FC AND   REG[0x83],0xFC     (0158)    and  reg[VR_ADC_AtoDcr3], ~03h
046E: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[VR_ADC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0471: 7F       RET                      (0161)    ret
0472: 62 D0 00 MOV   REG[0xD0],0x0      
0475: 41 83 EF AND   REG[0x83],0xEF     
0478: 41 82 DF AND   REG[0x82],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: VR_ADC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  VR_ADC_GetSamples:
                                        (0185) _VR_ADC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >VR_ADC_fMode
                                        (0188)    VR_ADC_ENABLE_INTEGRATOR_M
047B: 55 06 00 MOV   [0x6],0x0          (0189)    mov [VR_ADC_fMode],0
047E: 55 05 00 MOV   [0x5],0x0          (0190)    mov [VR_ADC_bState],0
0481: 53 07    MOV   [0x7],A            (0191)    mov [VR_ADC_bNumSamples],A
0483: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[VR_ADC_PWMdr2]
0485: B0 04    JNZ   0x048A             (0193)    jnz  .SkipPulseWrite
0487: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[VR_ADC_PWMdr2], 1
048A: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
048C: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
048F: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0492: 70 EF    AND   F,0xEF             
0494: 62 DB FE MOV   REG[0xDB],0xFE     
0497: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    VR_ADC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
049A: 7F       RET                      (0204)    ret
049B: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: VR_ADC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  VR_ADC_StopADC:
                                        (0227) _VR_ADC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
049D: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
04A0: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
04A3: 70 EF    AND   F,0xEF             
04A5: 41 E1 FE AND   REG[0xE1],0xFE     
04A8: 43 82 20 OR    REG[0x82],0x20     
04AB: 43 83 10 OR    REG[0x83],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    VR_ADC_STOPADC_M
                                        (0234)    VR_ADC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
04AE: 7F       RET                      (0236)    ret
04AF: 62 D0 00 MOV   REG[0xD0],0x0      
04B2: 51 04    MOV   A,[0x4]            
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: VR_ADC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  VR_ADC_fIsDataAvailable:
                                        (0259) _VR_ADC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    VR_ADC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
04B4: 7F       RET                      (0263)    ret
04B5: 62 D0 00 MOV   REG[0xD0],0x0      
04B8: 55 04 00 MOV   [0x4],0x0          
04BB: 58 00    MOV   X,[0x0]            
04BD: 51 01    MOV   A,[0x1]            
04BF: 3C 04 00 CMP   [0x4],0x0          
04C2: BF F5    JNZ   0x04B8             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  VR_ADC_iClearFlagGetData
                                        (0270) ;                  VR_ADC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  VR_ADC_iClearFlagGetData:
                                        (0289) _VR_ADC_iClearFlagGetData:
                                        (0290)  VR_ADC_wClearFlagGetData:
                                        (0291) _VR_ADC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    VR_ADC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
04C4: 7F       RET                      (0295)    ret
04C5: 62 D0 00 MOV   REG[0xD0],0x0      
04C8: 55 04 00 MOV   [0x4],0x0          
04CB: 51 01    MOV   A,[0x1]            
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  VR_ADC_cClearFlagGetData
                                        (0302) ;                  VR_ADC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  VR_ADC_cClearFlagGetData:
                                        (0319) _VR_ADC_cClearFlagGetData:
                                        (0320)  VR_ADC_bClearFlagGetData:
                                        (0321) _VR_ADC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    VR_ADC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
04CD: 7F       RET                      (0325)    ret
04CE: 62 D0 00 MOV   REG[0xD0],0x0      
04D1: 58 00    MOV   X,[0x0]            
04D3: 51 01    MOV   A,[0x1]            
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  VR_ADC_iGetData
                                        (0330) ;				   VR_ADC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  VR_ADC_iGetData:
                                        (0348) _VR_ADC_iGetData:
                                        (0349)  VR_ADC_wGetData:
                                        (0350) _VR_ADC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    VR_ADC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
04D5: 7F       RET                      (0354)    ret
04D6: 62 D0 00 MOV   REG[0xD0],0x0      
04D9: 51 01    MOV   A,[0x1]            
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  VR_ADC_bGetData
                                        (0359) ;                  VR_ADC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  VR_ADC_bGetData:
                                        (0377) _VR_ADC_bGetData:
                                        (0378)  VR_ADC_cGetData:
                                        (0379) _VR_ADC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    VR_ADC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
04DB: 7F       RET                      (0383)    ret
04DC: 62 D0 00 MOV   REG[0xD0],0x0      
04DF: 51 04    MOV   A,[0x4]            
04E1: 55 04 00 MOV   [0x4],0x0          
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: VR_ADC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  VR_ADC_fClearFlag:
                                        (0408) _VR_ADC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    VR_ADC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
04E4: 7F       RET                      (0412)    ret
04E5: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: VR_ADC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  VR_ADC_WritePulseWidth:
                                        (0434) _VR_ADC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    VR_ADC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
04E7: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File VR_ADC.asm
FILE: C:\Users\zrb25\DOCUME~1\GitHub\ECEC304\PDPROJ~1\PDPROJ~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) #define		LED_PORT		PRT0DR
(0009) 		//Constant definition for the data port (Port 0) where the LED (LED1) resides.
(0010) 
(0011) #define		LED1_ON			0x01
(0012) #define		LED2_ON			0x02
(0013) #define		LED3_ON			0x04
(0014) #define		LED4_ON			0x08
(0015) 		//Constant definition to OR with the LED1_PORT to turn on the LED (LED1).
(0016) 
(0017) #define		LED1_OFF		0xFE
(0018) #define		LED2_OFF		0xFD
(0019) #define		LED3_OFF		0xFB
(0020) #define		LED4_OFF		0xF8
(0021) 		//Constant definition to AND with the LED1_PORT to turn off the LED (LED1).
(0022) 
(0023) unsigned char ucVR_ADCResult;
(0024) 		//This global variable holds the converted output of the potentiometer (VR).
(0025) 
(0026) void main()
(0027) {
(0028)     M8C_EnableGInt;
__UserModules_end|__text_start|_main|_main:
    04E8: 71 01    OR    F,0x1
(0029) 	    //Enables the Global Interrupt
(0030) 
(0031) 	VR_PGA_Start(VR_PGA_HIGHPOWER);
    04EA: 10       PUSH  X
    04EB: 50 03    MOV   A,0x3
    04ED: 7C 03 99 LCALL VR_PGA_Start|_VR_PGA_SetPower|VR_PGA_SetPower|_VR_PGA_Start
(0032) 			//Performs all required initialization for the PGA User Module and sets the power level for the PGA
(0033) 			//to high power (VR_PGA_HIGHPOWER).
(0034) 
(0035) 	VR_ADC_Start(VR_ADC_HIGHPOWER);
    04F0: 50 03    MOV   A,0x3
    04F2: 7C 04 47 LCALL _VR_ADC_Start
(0036) 			//Performs all required initialization for the VR_ADC User Module and sets the power level to high power.
(0037) 
(0038) 	VR_ADC_GetSamples(0);
    04F5: 50 00    MOV   A,0x0
    04F7: 7C 04 72 LCALL _VR_ADC_GetSamples
    04FA: 20       POP   X
    04FB: 80 41    JMP   0x053D
(0039) 			//Sets the VR_ADC to run continuously by providing a 0 in the paramater list.
(0040) 
(0041) 
(0042)     while(1)
(0043) 		//infinte loop.
(0044) 	{
(0045) 		if (VR_ADC_fIsDataAvailable() != 0)
    04FD: 10       PUSH  X
    04FE: 7C 04 AF LCALL _VR_ADC_fIsDataAvailable
    0501: 20       POP   X
    0502: 62 D0 00 MOV   REG[0xD0],0x0
    0505: 39 00    CMP   A,0x0
    0507: A0 35    JZ    0x053D
(0046) 				//This function checks the availability of sampled data.  The function returns a non-zero
(0047) 				//value if data has been converted and is ready to read.
(0048)        	{
(0049)         	ucVR_ADCResult = VR_ADC_bClearFlagGetData();
    0509: 10       PUSH  X
    050A: 7C 04 C5 LCALL _VR_ADC_cClearFlagGetData|_VR_ADC_bClearFlagGetData|VR_ADC_bClearFlagGetData|VR_ADC_cClearFlagGetData
    050D: 20       POP   X
    050E: 62 D0 00 MOV   REG[0xD0],0x0
    0511: 53 0A    MOV   [ucVR_ADCResult],A
(0050) 				//This function clears the data ready flag and gets converted data as an unsigned char and
(0051) 				//stores it in the variable ucVR_ADCResult.   This function also checks to see that data-flag
(0052) 				//is still reset.   If not the data is retrieved again.   This makes sure that the ADC interrupt
(0053) 				//routine did not update the answer while it was being collected.
(0054) 
(0055) 			if (ucVR_ADCResult <= 64 )
    0513: 50 40    MOV   A,0x40
    0515: 3A 0A    CMP   A,[ucVR_ADCResult]
    0517: C0 06    JC    0x051E
(0056) 				// Test to see if the potentiometer is less than 1/3 of the way up its 8-bit scale.
(0057) 			{
(0058) 					//Disabling the Interrupt for the Timer stops the blinking
(0059) 				LED_PORT |= LED1_ON;
    0519: 43 00 01 OR    REG[0x0],0x1
(0060) 					// Turns the LED Off
(0061) 			}	//end (ucVR_ADCResult <= 85)
    051C: 80 20    JMP   0x053D
(0062) 
(0063) 			else if (ucVR_ADCResult <= 128)
    051E: 62 D0 00 MOV   REG[0xD0],0x0
    0521: 50 80    MOV   A,0x80
    0523: 3A 0A    CMP   A,[ucVR_ADCResult]
    0525: C0 06    JC    0x052C
(0064) 				// Test to see if the potentiometer is less than 2/3 of the way up its 8-bit scale.
(0065) 			{
(0066) 				LED_PORT |= LED2_ON;
    0527: 43 00 02 OR    REG[0x0],0x2
(0067) 					//Flashes the LED
(0068) 			} // end (ucVR_ADCResult <= 170)
    052A: 80 12    JMP   0x053D
(0069) 			else if (ucVR_ADCResult <= 192)
    052C: 62 D0 00 MOV   REG[0xD0],0x0
    052F: 50 C0    MOV   A,0xC0
    0531: 3A 0A    CMP   A,[ucVR_ADCResult]
    0533: C0 06    JC    0x053A
(0070) 				// Test to see if the potentiometer is less than 2/3 of the way up its 8-bit scale.
(0071) 			{
(0072) 				LED_PORT |= LED3_ON;
    0535: 43 00 04 OR    REG[0x0],0x4
(0073) 					//Flashes the LED
(0074) 			} // end (ucVR_ADCResult <= 170)
    0538: 80 04    JMP   0x053D
(0075) 			else
(0076) 				// Don't need to test the top third.
(0077) 			{
(0078) 					//Disabling the Interrupt for the Timer stops the blinking
(0079) 				LED_PORT |= LED4_ON;
    053A: 43 00 08 OR    REG[0x0],0x8
(0080) 					//Turn on LED1 by setting Bit 0 of Port 0 to high.
(0081) 			} // end else
(0082) 		} // end (VR_ADC_fIsDataAvailable() != 0)
(0083) 	}
    053D: 8F BF    JMP   0x04FD
(0084) 
(0085)     //Read Port0 and XOR it with 0x01 to change the status from On to Off and vice-versa.
(0086)     PRT0DR ^= 0x01;
(0087) }
    053F: 8F FF    JMP   0x053F
